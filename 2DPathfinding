from __future__ import division
import math

def get_offsets(direction_to_end, x_major):
    
    offsets = []
    if not all(direction_to_end):
        for method in range(8):
            if method == 0:
                x_offset = 0 if not direction_to_end[0] else 1 if direction_to_end[0] > 0 else -1
                y_offset = 0 if not direction_to_end[1] else 1 if direction_to_end[1] > 0 else -1
            if method == 1:
                if x_major:
                    x_offset = 1 if direction_to_end[0] > 0 else -1
                    y_offset = 1
                else:
                    x_offset = 1
                    y_offset = 1 if direction_to_end[1] > 0 else -1
            if method == 2:
                if x_major:
                    x_offset = 1 if direction_to_end[0] > 0 else -1
                    y_offset = -1
                else:
                    x_offset = -1
                    y_offset = 1 if direction_to_end[1] > 0 else -1
            if method == 3:
                if x_major:
                    x_offset = 0
                    y_offset = 1
                else:
                    x_offset = 1
                    y_offset = 0
            if method == 4:
                if x_major:
                    x_offset = 0
                    y_offset = -1
                else:
                    x_offset = -1
                    y_offset = 0
            if method == 5:
                if x_major:
                    x_offset = -1 if direction_to_end[0] > 0 else 1
                    y_offset = 1
                else:
                    x_offset = 1
                    y_offset = -1 if direction_to_end[1] > 0 else 1
            if method == 6:
                if x_major:
                    x_offset = -1 if direction_to_end[0] > 0 else 1
                    y_offset = 0
                else:
                    x_offset = 0
                    y_offset = -1 if direction_to_end[1] > 0 else 1
            if method == 7:
                if x_major:
                    x_offset = -1 if direction_to_end[0] > 0 else 1
                    y_offset = -1
                else:
                    x_offset = -1
                    y_offset = -1 if direction_to_end[1] > 0 else 1
            offsets.append((x_offset, y_offset))
    else:
        for method in range(8):
            #1, 1
            if method == 0:
                x_offset = 1 if direction_to_end[0] > 0 else -1
                y_offset = 1 if direction_to_end[1] > 0 else -1
            #0, 1
            if method == 3:
                if x_major:
                    x_offset = 0
                    y_offset = 1 if direction_to_end[1] > 0 else -1
                elif not x_major:
                    x_offset = 1 if direction_to_end[0] > 0 else -1
                    y_offset = 0
                else:
                    print 'fail'
                    continue
            #1, 0
            if method == 1:
                if not x_major:
                    x_offset = 0
                    y_offset = 1 if direction_to_end[1] > 0 else -1
                elif x_major:
                    x_offset = 1 if direction_to_end[0] > 0 else -1
                    y_offset = 0
                else:
                    print 'fail', method
                    continue
            #0, -1
            if method == 4:
                if x_major:
                    x_offset = 0
                    y_offset = -1 if direction_to_end[1] > 0 else 1
                elif not x_major:
                    x_offset = -1 if direction_to_end[0] > 0 else 1
                    y_offset = 0
                else:
                    print 'fail'
                    continue
            #-1, 0
            if method == 7:
                if not x_major:
                    x_offset = 0
                    y_offset = -1 if direction_to_end[1] > 0 else 1
                elif x_major:
                    x_offset = -1 if direction_to_end[0] > 0 else 1
                    y_offset = 0
                else:
                    print 'fail', method
                    continue
            #1, 1
            if method == 6:
                x_offset = -1 if direction_to_end[0] > 0 else 1
                y_offset = -1 if direction_to_end[1] > 0 else 1
            #1, -1
            if method == 2:
                if x_major:
                    x_offset = 1 if direction_to_end[0] > 0 else -1
                    y_offset = -1 if direction_to_end[1] > 0 else 1
                else:
                    x_offset = -1 if direction_to_end[0] > 0 else 1
                    y_offset = 1 if direction_to_end[1] > 0 else -1
            #-1, 1
            if method == 5:
                if x_major:
                    x_offset = -1 if direction_to_end[0] > 0 else 1
                    y_offset = 1 if direction_to_end[1] > 0 else -1
                else:
                    x_offset = 1 if direction_to_end[0] > 0 else -1
                    y_offset = -1 if direction_to_end[1] > 0 else 1

            offsets.append((x_offset, y_offset))
    return offsets

use_bounds = True
allow_diagonal_spaces = False
grid_str = """
________________
____0___________
_0000000________
__e_0_______0___
_____000_____0__
__000_____0000_0
__0___0__00_0_s0
_________0____00
"""
grid_str = """
__0000____s______0______
___________00_____00____
_____0______________000_
_____0__0____00____00___
______0___0____00000____
___00000__0_____0____000
______0__00___000___0_00
___00__0____00___0___00_
_____00__000000_________
____0000_________00_____
___e____0000000__0000000
"""
grid = []
walls = set()
for i, line in enumerate(grid_str.strip().split('\n')):
    new_line = []
    for j, char in enumerate(line):
        if char == '_':
            new_line.append(False)
        elif char == '0':
            new_line.append(True)
            walls.add((j, i))
        elif char == 's':
            new_line.append(False)
            start = (j, i)
        elif char == 'e':
            new_line.append(False)
            end = (j, i)
    grid.append(new_line)
height = len(grid)
width = len(grid[0])
            
print 'start', start
print 'end', end

def find_path(grid, start, end, use_border=True, ignore_diagonal_walls=False, _visited=[]):

    height = len(grid)
    width = len(grid[0])

    path = [start]
    visited = set(path + _visited)
    
    while True:
        compass = (end[0] - path[-1][0], end[1] - path[-1][1])
        if compass == (0, 0):
            return path

        #Iterate through all the offsets
        found_location = False
        for offset in get_offsets(compass, abs(compass[0]) == max(abs(compass[0]), abs(compass[1]))):
            new_location = (path[-1][0] + offset[0], path[-1][1] + offset[1])

            #Check if it inside the grid
            if use_border:
                if not (0 <= new_location[0] < width and 0 <= new_location[1] < height):
                    continue

            #Check the location is empty
            if new_location in visited or new_location in walls:
                continue
            
            #Check the location doesn't involve squeezing between diagonal wall
            if not ignore_diagonal_walls and all(offset):
                _x_check = (path[-1][0] + offset[0], path[-1][1])
                _y_check = (path[-1][0], path[-1][1] + offset[1])
                if _x_check in walls and _y_check in walls:
                    continue

            found_location = True
            visited.add(new_location)
            break

        #Go back a step if no valid locations
        if not found_location:
            path.pop()
            continue
        
        path.append(new_location)
    return path

def optimise_path(path):

    path_len = len(path)
    steps = []
    i = 3


    #Calculate the step sizes
    while True:
        step = 2 ** i
        if step > path_len:
            break
        steps.append(step)
        i += 1
        
    #Optimise the path
    for step_size in steps[::-1]:

        #Iterate twice (eg. 0-4, 4-8 then 2-6, 6-10)
        for i in range(2):
            step = i * step_size // 2
            while step < path_len:

                #Calculate path indexes
                start = step
                step += step_size
                end = step
                if step > path_len:
                    start = path_len - step_size
                    end = path_len - i * step_size // 2

                #Only replace old path if new path is shorter
                try:
                    new_path = find_path(grid, path[start], path[end-1])
                    if len(new_path) <= step_size:
                        path = path[:start] + new_path + path[end:]
                except IndexError:
                    pass
    return path

def find_alternate_path(path, max_tries=100):
    i = 1
    while True:
        try:
            return find_path(grid, start, end, _visited=path[i*2:-i])
            break
        except IndexError:
            i += 1

path = find_path(grid, start, end)
#path = find_alternate_path(path)
path = optimise_path(path)


grid_str = []
for y in range(height):
    line = []
    for x in range(width):
        coordinate = (x, y)
        if coordinate == start:
            line.append('s')
        elif coordinate == end:
            line.append('e')
        elif coordinate in path:
            line.append('.')
        elif 0 <= x < width and 0 <= y < height and grid[y][x]:
            line.append('0')
        else:
            line.append('_')
    grid_str.append(''.join(line))
print '\n'.join(grid_str)
